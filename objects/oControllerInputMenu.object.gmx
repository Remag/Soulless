<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oBaseMenu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isActive = false;
baseX = x;

select = 0;
firstColumnOffsetX = -340;
secondColumnOffsetX = 50;
columnOffsetY = -30;
keyOffsetX = 265;

ySeparation = 40;

settingKey = false;     //sets whether or not a key is getting set
resetPrompt = false;    //shows the message that controls were reset

strSelect[0] = "Left";
strSelect[1] = "Right";
strSelect[2] = "Up";
strSelect[3] = "Down";
strSelect[4] = "Restore Defaults";
strSelect[5] = "Jump";
strSelect[6] = "Shoot";
strSelect[7] = "Restart";
strSelect[8] = "Portal";
strSelect[9] = "";

//get current controls
strKey[0] = scrGetControllerBind(global.leftButton[1]);
strKey[1] = scrGetControllerBind(global.rightButton[1]);
strKey[2] = scrGetControllerBind(global.upButton[1]);
strKey[3] = scrGetControllerBind(global.downButton[1]);
strKey[4] = "";
strKey[5] = scrGetControllerBind(global.jumpButton[1]);
strKey[6] = scrGetControllerBind(global.shootButton[1]);
strKey[7] = scrGetControllerBind(global.restartButton[1]);
strKey[8] = scrGetControllerBind(global.portalButton[1]);
strKey[9] = "Back";

animationIndex = 0;
animationStep = 0;
fireOffset = 0;
fireDelta = 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>resetPrompt = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isActive = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( !isActive ) {
    exit;
}

// Animate the selector.
animationIndex += 0.2;
animationStep++;
fireOffset += fireDelta;
if( fireOffset &gt; 2 || fireOffset &lt; -2 ) {
    fireDelta = -fireDelta;
}

if (!settingKey)
{
    if( scrButtonCheckPressed( global.menuLeftButton ) ) {
        audio_play_sound(global.menuSound,0,false);
        select -= 5;
        if( select &lt; 0 ) {
            select += 10;
        }
    } else if( scrButtonCheckPressed( global.menuRightButton ) ) {
        audio_play_sound(global.menuSound,0,false);
        select += 5;
        if( select &gt; 9 ) {
            select -= 10;
        }
    } else if( scrButtonCheckPressed( global.menuUpButton ) ) {
        audio_play_sound(global.menuSound,0,false);
        select -= 1;
        if( select &lt; 0 ) {
            select = 9;
        }
    } else if( scrButtonCheckPressed(global.menuDownButton ) ) {
        audio_play_sound(global.menuSound,0,false);
        select += 1;
        if( select &gt; 9 ) {
            select = 0;
        }
    } else if( scrButtonCheckPressed( global.menuAcceptButton1 ) || scrButtonCheckPressed( global.menuAcceptButton2 ) ) {
        if( select == 9 ) {
           scrSaveConfig();    //save changes
           oMenuTransitionController.targetX = oSettingsMenu.baseX;
           oSettingsMenu.alarm[0] = 1;
           isActive = false;
           exit; 
        }
        if( select != 4 ) {
            settingKey = true;
            animationStep = 0;
        } else {
            // Default controls.
            global.leftButton[1] = gp_padl;
            global.rightButton[1] = gp_padr;
            global.upButton[1] = gp_padu;
            global.downButton[1] = gp_padd;
            global.jumpButton[1] = gp_face1;
            global.shootButton[1] = gp_face3;
            global.restartButton[1] = gp_face4;
            global.portalButton[1] = gp_select;
                
            resetPrompt = true;
            alarm[1] = 60;
        }
    }
} else {
    var buttonChange = scrAnyControllerButton();
    if (buttonChange != -1)  //check if a button is being pressed and if it is, store that button
    {                                          
        if (select == 0) {global.leftButton[1] = buttonChange;}
        else if (select == 1) {global.rightButton[1] = buttonChange;}
        else if (select == 2) {global.upButton[1] = buttonChange;}
        else if (select == 3) {global.downButton[1] = buttonChange;}
        else if (select == 5) {global.jumpButton[1] = buttonChange;}
        else if (select == 6) {global.shootButton[1] = buttonChange;}
        else if (select == 7) {global.restartButton[1] = buttonChange;}
        else if (select == 8) {global.portalButton[1] = buttonChange;}
        
        settingKey = false;
    }
    else if (keyboard_check_pressed(vk_anykey))    //check if a keybord key was pressed, exit prompt
    {
        settingKey = false;
    }
}

//get current controls
strKey[0] = scrGetControllerBind(global.leftButton[1]);
strKey[1] = scrGetControllerBind(global.rightButton[1]);
strKey[2] = scrGetControllerBind(global.upButton[1]);
strKey[3] = scrGetControllerBind(global.downButton[1]);
strKey[4] = "";
strKey[5] = scrGetControllerBind(global.jumpButton[1]);
strKey[6] = scrGetControllerBind(global.shootButton[1]);
strKey[7] = scrGetControllerBind(global.restartButton[1]);
strKey[8] = scrGetControllerBind(global.portalButton[1]);
strKey[9] = "Back";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_set_font(fMenuOption);

for( var i = 0; i &lt; 4; i++ ) {
    scrDrawInputRow( firstColumnOffsetX, i, i, false );
}
scrDrawInputRow( firstColumnOffsetX, 5, 4, false );
for( var i = 0; i &lt; 4; i++ ) {
    scrDrawInputRow( secondColumnOffsetX, i, i + 5, false );
}
scrDrawInputRow( secondColumnOffsetX, 5, 9, true );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
