<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>currentGate = 1;
maxGate = 1;
segmentCount = 12;
pbSegment = 8;

currentSegment = oPlayerData.lastPracticeSegment;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var isLeft = scrButtonCheckPressed( global.leftButton );
var isTop = scrButtonCheckPressed( global.upButton );
var isRight = scrButtonCheckPressed( global.rightButton );
var isBottom = scrButtonCheckPressed( global.downButton );
var isSelect = scrButtonCheckPressed( global.shootButton );

if( isSelect ) {
    exit;
}

if( isLeft ) {
    if( currentSegment != -1 ) {
        scrTrySetSegment( currentSegment - 1 );
    }
}
if( isTop ) {
    if( currentSegment != -1 ) {
        if( !scrTrySetSegment( currentSegment - 4 ) &amp;&amp; maxGate &gt; 1 ) {
            currentSegment = -1;
        }
    }
}
if( isRight ) {
    if( currentSegment != -1 ) {
        scrTrySetSegment( currentSegment + 1 );
    }
}
if( isBottom ) {
    if( currentSegment != -1 ) {
        scrTrySetSegment( currentSegment + 4 );
    } else {
        currentSegment = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font( fAttackNumber );
draw_set_color( c_white );
draw_set_halign( fa_center );
draw_set_valign( fa_center );

var attacksOffset;
if( maxGate &gt; 1 ) {
    attacksOffset = 32;
    var gateX = x + 96 * 2;
    var gateY = y + 16;
    
    draw_text( gateX, gateY, "Gate " + string( currentGate ) );
    if( currentSegment == -1 ) {
        draw_rectangle( gateX - 64, gateY - 16, gateX + 64, gateY + 16, true );
    }
} else {
    attacksOffset = 16;
}

for( var i = 0; i &lt; segmentCount; i++ ) {
    var segmentRow = floor( i / 4 );
    var segmentColumn = i % 4;
    var segmentX = x + segmentColumn * 96;
    var segmentY = y + segmentRow * 96 + attacksOffset;
    
    if( i &gt; pbSegment ) {
        draw_set_color( c_gray );
    } else {
        draw_set_color( c_white );
    }
    draw_text( segmentX + 48, segmentY + 48, string( i + 1 ) );
    if( currentSegment == i ) {
        draw_rectangle( segmentX + 16, segmentY + 16, segmentX + 78, segmentY + 78, true );
    }
}

draw_set_color( c_white );
draw_set_font( fDefault24 );
draw_set_valign( fa_top );
draw_set_halign( fa_left );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
