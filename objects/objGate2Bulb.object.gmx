<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGate2Bulb</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>99</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
image_index = irandom( 2 );
bulbType = 0;
bulbPhase = 0;
bulbPeriod = 24;
bulbBehaviour = true;
bulbTrackingPos = 0;
innerTrackingPos = 0;
bulbIntensity = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bulbIntensity = 1.25 + sin( ( objAvoidanceController.t + bulbPhase ) / bulbPeriod  * pi );
if( bulbBehaviour ) {
    if( abs( bulbTrackingPos - innerTrackingPos ) &lt; 10 ) {
        innerTrackingPos = bulbTrackingPos;
    } else {
        innerTrackingPos += ( bulbTrackingPos - innerTrackingPos ) * 0.1 + 9 * sign( bulbTrackingPos - innerTrackingPos );
    }
    if( bulbType == 2 || bulbType == 3 ) {
        var dist = abs( x - innerTrackingPos );
        if( dist &lt;= 96 ) {
            bulbIntensity = lerp( bulbIntensity + 1, 0, dist / 96 );
        } else {
            bulbIntensity = 0;
        }
    } else {
        var dist = abs( y - innerTrackingPos );
        if( dist &lt;= 96 ) {
            bulbIntensity = lerp( bulbIntensity + 1, 0, dist / 96 );
        } else {
            bulbIntensity = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 0;
var blend = image_blend;
image_blend = c_white;
draw_self();
image_blend = blend;
if( shader_is_compiled( sdrLight ) ) {
    shader_set(sdrLight);
    var uvsPos = shader_get_uniform( sdrLight, "uvs" );
    var uIntensity = shader_get_uniform( sdrLight, "uIntensity" );
    var _uvs = sprite_get_uvs( sprite_index, image_index );
    shader_set_uniform_f( uvsPos, _uvs[0], _uvs[1], 1/(_uvs[2]-_uvs[0]), 1/(_uvs[3]-_uvs[1]) );
    shader_set_uniform_f( uIntensity, bulbIntensity );
    draw_set_blend_mode(bm_add);
    draw_self();
    draw_set_blend_mode(bm_normal);
    shader_reset();
} else {
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
