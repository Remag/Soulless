<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>floorTargetPos = 0;
wallTargetPos = 0;
leftTargetPos = 0;
rightTargetPos = 0;

floorCurrentPos = 0;
wallCurrentPos = 0;
leftCurrentPos = 0;
rightCurrentPos = 0;

baseLightIntensity = 0;
baseLightFade = 0;
sideModifier = 1;

explosionCount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var t = objAvoidanceController.t - 1;

if( t &gt;= 6545 &amp;&amp; t &lt; 6925 ) { // Segment 9.
    if( t == 6545 || t == 6546 ) {
        with( oGate2Bulb ) {
            image_blend = make_color_rgb( 255, 255, 0 );
        }       
    }
    with( oGate2WallRoundBulb ) {
        CurrentIntensity = 0;
    }
    with( oGate2FloorRoundBulb ) {
        CurrentIntensity = 0;
    }
    wallCurrentPos += 8;
    if( t &lt; 6912 ) {
        with( oGate2WallBulb ) {
            var dist = max( 0, other.wallCurrentPos - y ) % 192; 
            dist = min( dist, 192 - dist );
            CurrentIntensity = lerp( 0, FlickerIntensity + 1, dist / 96 );
        }
        with( oGate2FloorBulb ) {
            var dist = max( other.wallCurrentPos - 608 - x, other.wallCurrentPos - 608 - 800 + x );
            dist = max( 0, dist ) % 192;   
            dist = min( dist, 192 - dist );
            CurrentIntensity = lerp( 0, FlickerIntensity + 1, dist / 96 );
        }
    } else {
        baseLightIntensity += 0.25;
        with( oGate2Bulb ) {
            CurrentIntensity = other.baseLightIntensity;
        }
    }
    
} else if( t &gt;= 6925 &amp;&amp; t &lt; 7693 ) { // Segment 10.
    var phaseT = t - 6925;
    if( phaseT == 0 ) {
        floorCurrentPos = scrGetPlayerX();
    }
    if( phaseT % 192 == 0 || phaseT % 192 == 48 || phaseT % 192 == 96 ) {
        with( oGate2Bulb ) {
            image_blend = objAlgA10EffectSpawner.image_blend;
        }
    } else if( phaseT % 192 == 144 ) {
        with( oGate2Bulb ) {
            image_blend = c_white;
        }
    }
    scrDimAllBulbs();
    scrBulbDrawWallPos( objAvoidanceController.seg10BulletY );
    var wallX = objAvoidanceController.seg10WallX;
    if( phaseT &gt;= 96 * 7 + 48 ) {
        scrBulbDrawFloorPos( 400 - abs( wallX - 400 ) );
        scrBulbDrawFloorPos( 400 + abs( wallX - 400 ) );
    } else if( wallX != -200 ) {
        scrBulbDrawFloorPos( wallX );
        floorCurrentPos = wallX; 
    } else {
        floorTargetPos = objAvoidanceController.seg10BulletX;
        scrBulbTrackFloorPos();
    }
} else if( t &gt;= 7693 &amp;&amp; t &lt; 7695 ) { // Nothing.
    scrClearAllBulbs();
} else if( t &gt;= 7695 &amp;&amp; t &lt; 8465 ) { // Segment 11.
    if( t == 7695 ) {
        wallCurrentPos = 0;
        wallTargetPos = 0;
        floorCurrentPos = 0;
        floorTargetPos = 0;
    }
    if( t % 48 == 15 &amp;&amp; t &lt; 8440 ) {
        floorTargetPos = scrGetPlayerX();
        wallTargetPos = objAvoidanceController.seg11a_yy;
        with( oGate2Bulb ) {
            image_blend = objAvoidanceController.seg11Color;
        }
    }
    
    scrClearAllBulbs();
    scrBulbTrackWallPos();
    scrBulbTrackFloorPos();
    scrBulbDrawFloorPos( 800 - floorCurrentPos );
    
} else if( t &gt;= 8465 &amp;&amp; t &lt; 9250 ) { // Segment 12.
    var trackingPosY = ( t - 8465 ) * 4 * 608 / 785;
    trackingPosY = abs( trackingPosY % 1216 - 608 );
    wallTargetPos = trackingPosY;
    if( t == 8465 ) {
        floorCurrentPos = 768;
        wallCurrentPos = wallTargetPos;
        floorTargetPos = 800;
        var i = 0;
        with( oGate2Bulb ) {
            switch( i % 3 ) {
                case 0:
                    image_blend = make_colour_rgb( 255, 0, 0 );
                    break;
                case 1:
                    image_blend = make_colour_rgb( 0, 255, 0 );
                    break;
                case 2:
                    image_blend = make_colour_rgb( 0, 0, 255 );
                    break;
            }
            i++;
        }
    }
    scrClearWallBulbs();
    if( t &lt; 8657 ) {
        if( t &lt; 8637 ) {
            baseLightFade = 0;
        } else {
            baseLightFade += 0.05;
        }
        floorTargetPos -= 16;
        with( oGate2FloorBulb ) {
            var dist = x - other.floorTargetPos;
            dist = max( 0, dist ) % 192;   
            dist = min( dist, 192 - dist );
            CurrentIntensity = lerp( 0, FlickerIntensity + 1, dist / 96 );
            CurrentIntensity -= CurrentIntensity * other.baseLightFade;
        }
    } else if( t &lt; 8849 ) {
        scrClearFloorBulbs();
        floorTargetPos = 0;
        floorCurrentPos = objAvoidanceController.arch_xx;
        scrBulbDrawFloorPos( floorCurrentPos );
    } else if( t &lt; 9041 ) {
        if( t &lt; 9021 ) {
            baseLightFade = 0;
        } else {
            baseLightFade += 0.05;
        }
        flootCurrentPos = 32;
        floorTargetPos += 16;
        with( oGate2FloorBulb ) {
            var dist = other.floorTargetPos - x;
            dist = max( 0, dist ) % 192;   
            dist = min( dist, 192 - dist );
            CurrentIntensity = lerp( 0, FlickerIntensity + 1, dist / 96 );
            CurrentIntensity -= CurrentIntensity * other.baseLightFade;
        }
    } else {
        if( t &lt; 9230 ) {
            baseLightFade = 0;
        } else {
            baseLightFade += 0.05;
        }
        scrClearFloorBulbs();
        if( t == 9137 || t == 9163 || t == 9184 || t == 9191 || t == 9197 || t == 9204 || t == 9210 ) {
            explosionPosList[explosionCount] = objAvoidanceController.arch_xx;
            explosionCount++;
        }
        with( oGate2FloorBulb ) {
            for( var i = 0; i &lt; other.explosionCount; i++ ) {
                scrSetBulbDistanceIntensity( x, other.explosionPosList[i] );
            }
            scrSetBulbDistanceIntensity( x, other.floorCurrentPos );
            CurrentIntensity -= CurrentIntensity * other.baseLightFade;
        }
    }
    scrBulbTrackWallPos();
    scrBulbDrawWallPos( 608 - wallCurrentPos );

} else if( t &gt;= 9230 &amp;&amp; t &lt; 9613 ) { // Segment 13.
    var phaseT = ( t - 9230 ) % 96;
    with( oGate2WallRectBulb ) {
        self.BulbPeriod = 48;
        self.BulbPhase = 24;
        if( phaseT == 24 || t == 9230 ) {
            image_blend = make_colour_hsv( random( 255 ), 255, 255 );
        }
    }
    with( oGate2FloorRectBulb ) {
        self.BulbPeriod = 48;
        self.BulbPhase = 24;
        if( phaseT == 24 || t == 9230 ) {
            image_blend = make_colour_hsv( random( 255 ), 255, 255 );
        }
    }
    with( oGate2WallRoundBulb ) {
        self.BulbPeriod = 48;
        self.BulbPhase = 72;
        if( phaseT == 72 || t == 9230 ) {
            image_blend = make_colour_hsv( random( 255 ), 255, 255 );
        }
    }
    with( oGate2FloorRoundBulb ) {
        self.BulbPeriod = 48;
        self.BulbPhase = 72;
        if( phaseT == 72 || t == 9230 ) {
            image_blend = make_colour_hsv( random( 255 ), 255, 255 );
        }
    } 
} else if( t &gt;= 9613 &amp;&amp; t &lt; 10000 ) { // Segment 14.
    var phaseT = ( t - 9615 ) % 96;
    with( oGate2WallRectBulb ) {
        self.BulbPeriod = 48;
        self.BulbPhase = 24;
        if( phaseT == 24 || t == 9613 ) {
            image_blend = make_colour_hsv( 0, 255, 255 );
        }
    }
    with( oGate2FloorRectBulb ) {
        self.BulbPeriod = 48;
        self.BulbPhase = 24;
        if( phaseT == 24 || t == 9613 ) {
            image_blend = make_colour_hsv( 0, 255, 255 );
        }
    }
    with( oGate2WallRoundBulb ) {
        self.BulbPeriod = 48;
        self.BulbPhase = 72;
        if( phaseT == 72 || t == 9613 ) {
            image_blend = make_colour_hsv( random( 255 ), 255, 255 );
        }
    }
    with( oGate2FloorRoundBulb ) {
        self.BulbPeriod = 48;
        self.BulbPhase = 72;
        if( phaseT == 72 || t == 9613 ) {
            image_blend = make_colour_hsv( random( 255 ), 255, 255 );
        }
    }
} else if( t &gt;= 10000 &amp;&amp; t &lt; 10380 ) { // Segment 15.
    var phaseT = ( t - 10000 ) % 96;
    with( oGate2WallRoundBulb ) {
        self.BulbPeriod = 48;
        self.BulbPhase = 72;
        if( phaseT == 24 || t == 10000 ) {
            image_blend = make_colour_hsv( random( 255 ), 255, 255 );
        }
    }
    with( oGate2FloorRoundBulb ) {
        self.BulbPeriod = 48;
        self.BulbPhase = 72;
        if( phaseT == 24 || t == 10000 ) {
            image_blend = make_colour_hsv( random( 255 ), 255, 255 );
        }
    }
    if( phaseT &gt;= 48 ) {
        if( phaseT &lt; 76 ) {
            baseLightFade = 0;
        } else {
            baseLightFade += 0.05;
        }
        with( oGate2FloorRectBulb ) {
            var pos = 400 * ( phaseT - 48 ) / 48;
            var dist = 1.3 * pos - abs( 400 - x );
            dist = max( 0, dist );   
            dist = min( 2 * dist, 400 - dist );
            CurrentIntensity = lerp( 0, FlickerIntensity + 1, dist / 200 );
            CurrentIntensity -= other.baseLightFade * CurrentIntensity;
            image_blend = make_colour_hsv( 0, 255, 255 );
        }
        with( oGate2WallRectBulb ) {
            var pos = 304 * ( phaseT - 48 ) / 48;
            var dist = 1.3 * pos - abs( 304 - y );
            dist = max( 0, dist );   
            dist = min( 2 * dist, 304 - dist );
            CurrentIntensity = lerp( 0, FlickerIntensity + 1, dist / 152 );
            CurrentIntensity -= other.baseLightFade * CurrentIntensity;
            image_blend = make_colour_hsv( 0, 255, 255 );
        }
    } else {
        scrClearRectBulbs();
    }
} else if( t &gt;= 10380 &amp;&amp; t &lt; 10764 ) { // Segment 16.
    if( t == 10380 ) {
        baseLightFade = 1.0;
    }
    baseLightFade = max( 0, baseLightFade - 0.03 );
    with( oGate2FloorBulb ) {
        BulbPeriod = 48;
        BulbPhase = 0;
        var dist = abs( x - scrGetPlayerX() );
        if( dist &lt;= 96 ) {
            CurrentIntensity = lerp( FlickerIntensity + 1, 0, dist / 96 );
            CurrentIntensity -= other.baseLightFade * CurrentIntensity;
        }
        if( dist &gt; 96 || t == 10380 ) {
            CurrentIntensity = 0;
            image_blend = make_colour_hsv( random( 255 ), 255, 255 );
        }
    }
    with( oGate2WallRoundBulb ) {
        BulbPeriod = 48;
        BulbPhase = 72;
        image_blend = make_colour_rgb( 0, 0, 255 );
    }
    with( oGate2WallRectBulb ) {
        BulbPeriod = 48;
        BulbPhase = 24;
        image_blend = make_colour_rgb( 0, 0, 255 );
    }
} else if( t &gt;= 10764 &amp;&amp; t &lt; 11148 ) { // Segment 17.
   var phaseT = ( t - 10764 ) % 96;
   with( oGate2FloorBulb ) {
        CurrentIntensity = 0;
        BulbPeriod = 48;
        BulbPhase = 0;
        image_blend = make_colour_hsv( 0, 255, 255 );
   }
   with( oGate2WallRoundBulb ) {
        BulbPeriod = 48;
        BulbPhase = 72;
        if( phaseT == BulbPhase || t == 10764 ) {
            image_blend =  make_colour_hsv( random( 255 ), 255, 255 );
        }
   } 
   with( oGate2WallRectBulb ) {
        BulbPeriod = 48;
        BulbPhase = 24;
        if( phaseT == BulbPhase || t == 10764 ) {
            image_blend =  make_colour_hsv( random( 255 ), 255, 255 );
        }
   }
    scrBulbDrawFloorPos( scrGetPlayerX() );
} else if( t &gt;= 11148 &amp;&amp; t &lt; 11540 ) { // Segment 18.
    var color;
    if( t &lt; 11250 ) {
        color = make_colour_hsv( 80, 255, 255 );
    } else if( t &lt; 11350 ) {
        color = make_colour_hsv( 33, 255, 255 );
    } else if( t &lt; 11440 ) {
        color = make_colour_hsv( 20, 255, 255 );
    } else {
        color = make_colour_hsv( 0, 255, 255 );        
    }
    if( t == 11148 ) {
        baseLightFade = 0;
        if( scrGetPlayerX() &lt;= 400 ) {
            sideModifier = 1;
        } else {
            sideModifier = -1;
        }
    } else if( t &gt; 11520 ) {
        baseLightFade += 0.05;
    }
    
    var posX = 800 * ( t - 11148 ) / ( 11530 - 11148 );
    if( sideModifier == 1 ) {
        posX = 800 - posX;
    }
    var posY = 608 * ( t - 11148 ) / ( 11530 - 11148 );
    with( oGate2FloorBulb ) {
        var dist = other.sideModifier * ( x - posX );
        dist = clamp( dist, 0, 96 );
        CurrentIntensity = lerp( 0, FlickerIntensity + 1, dist / 96 );
        CurrentIntensity -= other.baseLightFade * CurrentIntensity;
        image_blend = color;
    }
    with( oGate2WallBulb ) {
        if( ( other.sideModifier == 1 &amp;&amp; EdgeId == 1 ) || ( other.sideModifier == -1 &amp;&amp; EdgeId == 2 ) ) {
            var dist = posY - y;
            dist = clamp( dist, 0, 96 );
            CurrentIntensity = lerp( 0, FlickerIntensity + 1, dist / 96 );
            CurrentIntensity -= other.baseLightFade * CurrentIntensity;
            image_blend = color;
        } else {
            CurrentIntensity = 0;
        }
    } 
} else {
    scrClearAllBulbs();
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
