<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprIndeicatorPart</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf = surface_create(256,256);

color_back = make_color_rgb(255, 255, 255);//make_color_rgb(190, 196, 200);
color_front = make_color_rgb( 0, 255, 50 );
color_pb = make_color_rgb( 255, 220, 0 );

radius_in = 57;
radius_out = 63;
thickness = 1.0;

count = 32;

progress = 0.45;
isPersonalBest = false;

image_alpha = 0.6;

segment_number = 49;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( instance_exists( objAvoidanceController ) ) {
    var pos = objAvoidanceController.t;
    var absSegment = objAvoidanceController.segment;
    var relSegment = absSegment;
    var prevSegmentCount = 0;
    var nextSegmentCount = 0;
    var segGate = 6;
    for( var i = 1; i &lt;= 6; i++ ) {
        var segCount = scrGetGateSegmentCount( i );
        nextSegmentCount += segCount;
        if( relSegment &lt;= segCount ) {
            segGate = i;
            break;
        }
        prevSegmentCount += segCount;
        relSegment -= segCount;
    }
    var minOffset = scrGetSegmentOffset( prevSegmentCount + 1 );
    var maxOffset = scrGetSegmentOffset( nextSegmentCount + 1 );
    //segment_number = absSegment;
    //progress = relSegment / scrGetGateSegmentCount( segGate );  
    segment_number = segGate;
    progress = ( pos - minOffset ) / ( maxOffset - minOffset );
    isPersonalBest = pos &gt;= global.session_pb;
    
    cur_segment = objAvoidanceController.segment;
    pb_segment = max(objAvoidanceController.segment, global.session_pb_segment);
}

//Debug only
if( global.debugMode ) {
    if( keyboard_check_pressed(vk_numpad0) ) {
        radius_in = clamp(radius_in - 1, 0, radius_out - 1);
    }
    if( keyboard_check_pressed(vk_numpad1) ) {
        radius_in = clamp(radius_in + 1, 0, radius_out - 1);
    }
    
    if( keyboard_check_pressed(vk_numpad2) ) {
        radius_out = clamp(radius_out - 1, radius_in + 1, 128);
    }
    if( keyboard_check_pressed(vk_numpad3) ) {
        radius_out = clamp(radius_out + 1, radius_in + 1, 128);
    }
    
    if( keyboard_check_pressed(vk_numpad4) ) {
        thickness = clamp(thickness - 0.1, 0.1, 5.0);
    }
    if( keyboard_check_pressed(vk_numpad5) ) {
        thickness = clamp(thickness + 0.1, 0.1, 5.0);
    }
    
    if( keyboard_check_pressed(vk_numpad6) ) {
        count = clamp(count - 1, 4, 256);
    }
    if( keyboard_check_pressed(vk_numpad7) ) {
        count = clamp(count + 1, 4, 256);
    }
    
    if( keyboard_check(vk_numpad8) ) {
        progress = clamp(progress - 0.005, 0.0, 1.0);
    }
    if( keyboard_check(vk_numpad9) ) {
        progress = clamp(progress + 0.005, 0.0, 1.0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( !surface_exists(surf) ) {
    surf = surface_create(256,256);
}

var xx_scale = (radius_out-radius_in) / sprite_get_height(sprite_index);

surface_set_target(surf);
    draw_clear_alpha(c_white, 0.0);
    
    texture_set_interpolation(true);
    
        for( i = count - 1; i &gt;= 0; i-- ) {
            var a_rad = i / count * 2 * pi;
            var xx = 128 + radius_in * sin(a_rad);
            var yy = 128 - radius_in * cos(a_rad);
            var a_deg = 90 - i / count * 360;
            var frontColor;
            if( isPersonalBest ) {
                frontColor = color_pb;
            } else {
                frontColor = color_front;
            }
            if( i &lt; floor(count * progress) ) {
                var color = frontColor;
            } else if( i &lt; ceil(count * progress) ) {
                var color = merge_colour(color_back, frontColor, frac(count * progress));
            } else {
                var color = color_back;    
            }
            draw_sprite_ext(sprite_index, image_index, xx, yy, xx_scale, thickness, a_deg, color, 1.0);
        }
        
        draw_set_font( fIndicatorNumber );
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        var gateColor;
        if( isPersonalBest ) {
            gateColor = color_pb;
        } else {
            gateColor = c_white;
        }
        scrDrawTextOutline(126, 128, segment_number, gateColor, c_black);
        
        draw_set_font( fAttackNumber );
        scrDrawTextOutline(126, 158, string(cur_segment) + "/" + string(pb_segment), gateColor, c_black);
    
    texture_set_interpolation(global.smoothingMode);

surface_reset_target();

draw_surface_ext(surf, x - 128, y - 128, image_xscale, image_yscale, image_angle, image_blend, image_alpha);

if( global.debugMode ) {
    draw_set_font( fAttackNumber );
    scrDrawTextOutline(x, y + 128, "radius_in: " + string(radius_in), c_black, c_white);
    scrDrawTextOutline(x, y + 144, "radius_out: " + string(radius_out), c_black, c_white);
    scrDrawTextOutline(x, y + 160, "thickness: " + string(thickness), c_black, c_white);
    scrDrawTextOutline(x, y + 176, "count: " + string(count), c_black, c_white);
    scrDrawTextOutline(x, y + 192, "progress: " + string(progress), c_black, c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
