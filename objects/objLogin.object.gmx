<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>url = global.api_url + "login/";

if( global.debugMode ) {
    state = 5;
} else {
    state = 0;
}

login = "";
password = "";

md5 = "";

login_id = 0;
post_id = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state) {
    case 0: //Entering login/password
        login_id = get_login_async(oMetaInfo.LastLogin, oMetaInfo.LastPassword);
        state = 1;
        break;
    case 1: //Waiting for response
        //Do nothing
        break;
    case 2: //Sending info
        rng = string(irandom(100000));
        md5 = md5_string_utf8(string(login) + string(password) + rng + "heh");
        data = ds_map_create();
        ds_map_add(data, "login", string(login));
        ds_map_add(data, "password", string(password));
        ds_map_add(data, "rng", rng);
        json = json_encode(data);
        post_id = http_post_string(url, json);
        ds_map_destroy(data);
        state = 3;
        break;
    case 3: //Waiting for response
        //Do nothing
        break;
    case 4: //Error logging in
        state = 0;
        break;
    case 5: //Success
        room_goto_next();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( ds_map_find_value(async_load, "id") == login_id ) {
    login = ds_map_find_value(async_load, "username");
    password = ds_map_find_value(async_load, "password");
    
    if( !is_undefined( login ) ) {
        oMetaInfo.LastLogin = login;
    } else {
        oMetaInfo.LastLogin = "";
    }
    if( !is_undefined( login ) &amp;&amp; login != "" &amp;&amp; !is_undefined( password ) ) {
        oMetaInfo.LastPassword = password;
    } else {
        oMetaInfo.LastPassword = "";
    }
    
    state = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var r_str = "null";
if( ds_map_find_value(async_load, "id") == post_id) {
    if( ds_map_find_value(async_load, "status") == 0 ) {
        r_str = ds_map_find_value(async_load, "result");
        data = json_decode(r_str)
        if( data == -1 ) {
            state = 4;
        } else {
            data_success = ds_map_find_value(data, "success");
            if( !data_success ) {
                state = 4; 
            } else {
                data_md5 = ds_map_find_value(data, "hash");
                if( md5 != data_md5 ) {
                    state = 4;
                } else {
                    state = 5;
                }
            }
            ds_map_destroy(data);
        }
    }
    if( ds_map_find_value(async_load, "status") &lt; 0 ) {
        state = 4;
    }
} else {
    state = 4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
